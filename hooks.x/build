#!/usr/bin/env bash
set -eu
set -x
echo "ðŸ”µ build"
source hooks/.config

echo "âœ… Will build the following architectures: $verified_build_architectures"
  BASE_IMAGE_PREFIX="${base_image_prefix_map[${arch}]}"
  docker buildx create --use --name image image-amd64
  docker buildx create --append --name image image-arm64
  docker buildx build --platform linux/amd64,linux/arm64 .

for arch in ${verified_build_architectures[@]}; do
  echo "âœ… building $arch"


  #--build-arg BASE_IMAGE_PREFIX=${BASE_IMAGE_PREFIX} \
  #--build-arg ARCH=${arch} \

  #ls -l
  #docker buildx build \
  #--build-arg ARCH=${arch} \
  #--platform linux/arm/v7,linux/arm64/v8,linux/amd64 \
  #--tag ${IMAGE_NAME} \
  #--file ${DOCKERFILE_PATH} \
  #.



  #docker build \
    #--build-arg BASE_IMAGE_PREFIX=${BASE_IMAGE_PREFIX} \
    #--build-arg ARCH=${arch} \
    #--file $DOCKERFILE_PATH \
    #--tag "${IMAGE_NAME}-${arch}"  \
    #.
done

echo "âœ… images built:"
docker image ls

# https://github.com/moby/moby/issues/36552
#
tempdir=$(mktemp -d -t yolo.XXXXXXXX)
cd $tempdir

for arch in ${verified_build_architectures[@]}; do
  echo "âœ… yolo fixing platform $arch"

  manifest_arch=${docker_to_manifest_map[${arch}]}
  docker save "${IMAGE_NAME}-${arch}"| tar xv

  for filename in */json; do
    [ -e "$filename" ] || continue
    jq --compact-output 'del(.architecture)' < "$filename" | sponge "$filename"
  done

  for filename in *.json; do
    [ -e "$filename" ] || continue
    ! [ $filename = "manifest.json" ] || continue

    jq --arg architecture "$manifest_arch" \
       --compact-output '.architecture=$architecture' < "$filename" | sponge "$filename"
  done

  tar cv . | docker load
  rm -rf $tempdir/*
done

trap "exit 1"          HUP INT PIPE QUIT TERM
trap "rm -rf $tempdir" EXIT
